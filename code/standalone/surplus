# function used to check if Hamiltonian is Hermitian from tests/tes_model.py (insert at the beginning)


import tenpy.linalg.np_conserved as npc
import numpy.testing as npt


def check_hermitian(H):
    """Check if `H` is a hermitian MPO."""
    if not H.finite:
        # include once over the boundary: double the unit cell
        # a general MPO might have terms going over multiple unit cells, but we ignore that...
        Ws = H._W * 2
    else:
        Ws = H._W
    #check trace(H.H) = trace(H.H^dagger)
    W = Ws[0].take_slice([H.get_IdL(0)], ['wL'])

    trHH = npc.tensordot(W, W.replace_label('wR', 'wR*'), axes=[['p', 'p*'], ['p*', 'p']])
    trHHd = npc.tensordot(W, W.conj(), axes=[['p', 'p*'], ['p*', 'p']])
    for W in Ws[1:]:
        trHH = npc.tensordot(trHH, W, axes=['wR', 'wL'])
        trHHd = npc.tensordot(trHHd, W, axes=['wR', 'wL'])
        trHH = npc.tensordot(
            trHH, W.replace_label('wR', 'wR*'), axes=[['wR*', 'p', 'p*'], ['wL', 'p*', 'p']])
        trHHd = npc.tensordot(trHHd, W.conj(), axes=[['wR*', 'p', 'p*'], ['wL*', 'p*', 'p']])
    i = H.get_IdR(H.L - 1)
    trHH = trHH[i, i]
    trHHd = trHHd[i, i]
    print("check_hermitian: ", trHH, trHHd)
    npt.assert_array_almost_equal_nulp(trHH, trHHd, H.L * 20)


# insert after run_iDMRG
check_hermitian(M.H_MPO)


# print the couplings of the model (insert after M is defined)

import matplotlib.pyplot as plt
ax = plt.gca()
M.lat.plot_sites(ax)
M.plot_coupling_terms(ax)
ax.set_aspect("equal")
ax.legend()
plt.show()


# print bond dimension of each bond in the MPO (insert after M is defined)

print(M.H_MPO.chi)


# alternate ways for computing the left charge (use instead of QL_bar and QL)

QL_bar_m = [engine.psi.average_charge(bond=m) for m in range(engine.psi.L)]
QL = (QL_bar_m[0] - np.mean(QL_bar_m, axis=0))[0]
print(phi_ext, QL)


# can be useful to look at product state output (insert after product state is defined in run_iDMRG_engine)

print(product_state)  # NB: two sites per basis for honeycomb crystal


# insert at the end of def init_terms in fermions_haldane.py

import pprint

pprint.pprint(self.coupling_terms)


# insert chi_list after 'mixer':True

'chi_list': {0: 19, 20: 100, 40: chi_max},


# insert at the end of def init_sites

print(sorted(gs.opnames))
print(gs.state_labels)


# remove chi_list when reusing environment

del eng.DMRG_params['chi_list']


# set the filling in the model file

filling = get_parameter(model_params, 'filling', 1/3, self.name)
site = BosonSite(conserve=conserve, filling=filling, Nmax=1)

# define the filling in model params

model_params = dict(conserve='N', filling=1/2, t=t, mu=mu, V=V, lattice=lattice, bc_MPS='infinite',
                    order='default', Lx=Lx, Ly=Ly, bc_y='cylinder', verbose=0, phi_ext=phi_ext)


# edits in dmrg.py

diff --git a/tenpy/algorithms/dmrg.py b/tenpy/algorithms/dmrg.py
index fdb21f7..b9bc6cb 100644
--- a/tenpy/algorithms/dmrg.py
+++ b/tenpy/algorithms/dmrg.py
@@ -301,7 +301,7 @@ class Engine(NpcLinearOperator):
         self.ortho_to_envs = []
         self.init_env(model) # calls reset_stats

-    def init_env(self, model=None):
+    def init_env(self, model: object = None) -> object:
         """(Re-)initialize the environment.

         This function is useful to re-start DMRG after with a slightly different model or

# backup of old array

for u1, u2, dx in [(0, 0, np.array([1, 0])), (0, 0, np.array([0, -1])), (0, 0, np.array([-1, 1])),
                   (1, 1, np.array([-1, 0])), (1, 1, np.array([0, 1])), (1, 1, np.array([1, -1]))]: